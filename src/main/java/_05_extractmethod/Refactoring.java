package _05_extractmethod;


/**
 * 이름 : 메서드 추출
 *
 * 상황 : 메서드를 작성함
 *
 * 문제 : 메서드 하나가 너무 긺
 *
 * 해법 : 기존 메서드에서 묶을 수 있는 코드를 추출해 새로운 메서드를 작성함
 *
 * 결과 : 각 메서드가 짧아짐, 메서드 개수가 늘어남
 *
 * 방법 : (1) 새로운 메서드 작성
 *          1) 새로운 메서드에 적절한 이름 붙이기
 *              - 메서드가 무엇을 하는지 잘 알 수 있는 이름을 붙임
 *              - 메서드에서 실제로 어떻게 처리하는지 뜻하는 이름은 붙이지 않음
 *              - 적당한 이름을 붙일 수 없다면 적절한 메서드가 아님
 *          2) 기존 메서드에서 새로운 메서드로 코드 복사
 *          3) 메서드 내부의 지역 변수 검토
 *              - 복사한 코드 안에서만 사용하는 변수라면 메서드의 지역 변수로 만듦
 *          4) 메서드 매개변수 검토
 *              - 복사한 코드에서 입력값으로 사용하는 변수가 있다면 메서드 매개변수로 만듦
 *          5) 메서드 반환값 검토
 *              - 복사한 코드에서 변경되는 변수가 있는지 조사
 *              - 변경된 변수가 여러 개 있다면 리팩토링을 계쏙하기 어려움
 *              - 변경된 변수가 하나뿐이라면 '메서드 반환값'으로 쓰기에 적당하지 검토
 *                  : 적당하다면 메서드 반환값으로 사용
 *                  : 적당하지 않다면 리팩토링을 계쏙하기 어려움
 *          6) 컴파일
 *       (2) 새로운 메서드 호출
 *          1) 기존 메서드에 앞서 코드를 복사한 부분을 새로운 메서드 호출로 치환
 *          2) 기존 메서드에서 더는 사용하지 않는 지역 변수가 있으면 삭제
 *          3) 컴파일해서 테스트
 *
 * 관련항목 : (1) 임시 변수 분리
 *              - 메서드 추출 전에 임시 변수 분리부터 하는 게 좋을 때가 있음
 *          (2) 질의로 임시 변수 치환
 *              - 메서드 추출 전에 질의로 임시 변수 치환부터 하는 게 좋을 때가 있음
 *          (3) 메서드 인라인화
 *              - 역 리팩토링
 *
 * 메서드 이름은 '동사 + 명사' 순서로 짓는 게 보통
 *
 * 메서드 이름은 '무엇을 하는가(what to do)'를 알 수 있게
 *
 * 이름 중요
 *  - 하나씩 추출하는 코드 단위에 '알맞은 이름'이 떠오르지 않는다고 가정해보자.
 *  - 알맞은 이름이 떠오르지 않는다는 건 그 코드가 무엇을 하는지 파악하지 못했다는 증거이다.
 *  - 알맞지 않은 메서드명을 알맞게 바꾸는 것도 리팩토링이다.
 *
 * 메서드 추출은 역 리팩토링(메서드 인라인화)가 있다.
 *  - 메서드로 만들 정도가 아닌 간단한 처리라면 메서드 호출 부분에 직접 작성
 *  - 오버라이드된 메서드는 인라인화 하면 안됨
 *
 * 자바 코딩 규약
 *  - http://www.oracle.com/technetwork/java/codeconventions-150003.pdf
 *
 * 메서드 하나가 몇 줄 이상이면 '길다'고 판단해야 한다고 잘라 말할 수 없다.
 *  - 해당 메서드가 처리하는 양, 다른 메서드의 양, 또는 그 클래스가 담당하는 책임의 양과도 관련이 있기 때문이다.
 *  - '주석을 달고 싶어지는 정도'가 많을수록 긴메서드이다.
 *  - 실제로 코드에서 메서드 추출을 한다면 코드 덩어리를 차장서 '여기서 XXX 라는 처리를 한다'라고 한마디로 설명할 수 있는 게 중요
 */
public class Refactoring {
}
