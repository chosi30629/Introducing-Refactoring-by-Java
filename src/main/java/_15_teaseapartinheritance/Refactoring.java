package _15_teaseapartinheritance;


/**
 * 'tease apart'는 엉킨 털이나 선을 풀어낸다는 의미
 *
 * 이름 : 상속 구조 정리
 *
 * 상황 : 클래스 계층 하나에 많은 클래스가 존재함
 *
 * 문제 : 클래스 계층 하나에서 다양한 작업을 함
 *
 * 해법 : 상속을 분할하고 필요한 작업은 위임을 사용해 이용함
 *
 * 결과 : 부적절한 상속 관계를 해소 가능
 *       클래스 개선, 기능 추가가 편해짐
 *       클래스 개수가 늘기도 함
 *
 * 방법 : (1) 어떤 작업을 이동할지 결정
 *          1) 기존 클래스 계층에서 하던 작업 나열
 *          2) 이동할 작업 판단
 *       (2) 위임 처리
 *          1) 이동할 작업을 나타내는 클래스를 새로 작성
 *          2) 기존 클래스 계층에서 클래스 추출
 *          3) 위임할 필드 작성
 *       (3) 새로운 상속 구성
 *          1) 기존 클래스 계층의 하위 클래스에 대응하는 새로운 클래스의 하위 클래스 작성
 *          2) 기존 하위 클래스에서 새로운 하위 클래스로 메서드 이동
 *       (4) 추가 리팩토링
 *          1) 하위 클래스에 메서드가 남아 있지 않다면 하위 클래스 삭제
 *          2) 메서드 올리기 또는 메서드 내리기 실시
 *
 * 관련 항목 : 클래스 추출(6장)
 *              - 클래스 계층 내부에서 단위 작업을 추출할 때 사용
 *           메서드 이동
 *              - 메서드를 다른 클래스 계층으로 이동할 때 사용
 *           필드 이동
 *              - 필드를 다른 클래스 계층으로 이동할 때 사용
 *           메서드 올리기
 *              - 하위 클래스에 흩어진 공통 메서드를 상위 클래스에 모을 때 사용
 *           필드 올리기
 *              - 하위 클래스에 흩어진 공통 필드를 상위 클래스에 모을 때 사용
 *           상속을 위임으로 치환(13장)
 *              - 역 리팩토링
 *           브리지(Bridge) 패턴
 *              - 상속 구조 정리에 따라 만들어지는 패턴
 *              - 엉킨 상속 관계를 풀어내서 분할하고, 분할한 두 상속을 위임으로 접근하는 패턴
 *              - 두 상속을 강변에 비유하고 위임을 '다리(bridge)'에 비유한 것
 *
 * 직교성
 *  - before 예제에서 'CSV 문자열/CSV 파일 읽기'기능과 '트리 형식/표 형식으로 표시'기능을 자유롭게 조합할 수 없었다.
 *    이럴 때 두 기능 사이에 직교성이 없다고 한다.
 *  - after 예제를 통해 클래스 독립성이 높아지면서 기능이 직교한다는 걸 나타낸다.
 */
public class Refactoring {
}
