package definition00;


/**
 * 1) 리팩토링이란 외부에서 보는 프로그램 동작은 바꾸지 않고 프로그램의 내부 구조를 개선하는 것이다.
 *  - 리팩토링해도 외부에서 보는 프로그램 동작은 변하지 않는다.
 *  - 리팩토링하면 프로그램의 내부 구조가 개선된다.
 *  - 리팩토링 자체는 버그를 제거하거나 기능을 추가하지 않는다.
 *  - 리팩토링은 내부 구조를 개선해서 버그 제거와 기능 추가를 쉽게 하고 편한 코드를 만들 뿐이다.
 *
 * 2) 리팩토링할 때 동작이 정말로 변하지 않는 걸 확인하려고 테스트를 한다.
 *  - 리팩토링 전에 테스트 한다.
 *  - 리팩토링한다.
 *  - 리팩토링 후에 다시 테스트한다.
 *
 * 3) 리팩토리의 목적
 *  - 버그를 발견하기 쉽게 만든다.
 *  - 기능을 추가하기 쉽게 만든다.
 *  - 리뷰하기 쉽게 만는다.
 *
 * 4) 리팩토링의 한계
 *  - 한시라도 빨리 납품해야 하는 코드를 리팩토링하는 건 현명하지 않다.
 *  - 리팩토링의 효과는 시간이 지날수록 나타나는 법이다.
 *  - 납품 직전에 대규모로 리팩토링을 하지 말자.
 *
 * 5) 리팩토링은 참신한 주장이 아니라 여러 설계자나 프로그래머의 경험을 정리한 것이다.
 *  - 리팩토링을 배우면 자신의 경험을 재정리, 재확인하게 된다.
 *
 * 6) 어디까지가 '외부'인가?
 *  - 메서드 본체에 작성된 처리 내용을 리팩토링한다면 메서드 본체가 '내부'이고 메서드를 호출하는 부분이 '외부'이다.
 *    이때 '외부에서 보는 동작이 변하지 않는다'라는 건 '메서드 처리 내용을 변경해도 메서드를 호출하는 쪽에는 형향이 없음'이라는 말과 같다.
 *  - 클래스 A 안에서 선언한 여러 메서드를 리팩토링한다면 클래스 A가 '내부'가 되고 클래스 A를 이용하는 다른 클래스 B, C, D 등이 '외부'가 된다.
 *    리팩토링 결과, 클래스 A 내부에서만 사용하는 몇몇 메서드는 동작이 변할 수도 있다. 하지만 다른 클래스인 B, C, D 등에서 호출하는 메서드만
 *    동작이 변하지 않는다면 '외부에서 보는 동작'은 변하지 않는다.
 *  - 리팩토링 대상 범위가 '내부'이고 이용자 쪽이 '외부'가 된다.
 *  - 리팩토링에서 테스트는 리팩토링으로 영향받는 부분과 영향받지 않는 부분을 명시한다.
 *  - 테스트는 '리팩토링의 영향은 이 범위를 벗어나지 않는다'라고 주장하는 것이다.
 *
 * 7) 디자인 패턴을 점이라고 하면 리팩토링은 점과 점을 잇는 화살표 같은 것이다.
 *  - 현재 코드를 더 좋은 코드로 바꾸는 게 리팩토링이고, 리팩토링이 향하는 '더 좋은 코드의 이상향'이 디자인 패턴이다.
 */
public class WhatIsRefactoring {


}
