package _10_replaceerrorcodewithexception;


/**
 * 이름 : 에러 코드를 예외로 치환
 *
 * 상황 : 에러 발생 사실을 에러 코드로 표현함
 *
 * 문제 : 정상 처리와 에러 처리가 혼재함
 *       에러 코드 전파 처리가 넓은 범위에 있음
 *
 * 해법 : 에러 코드 대신에 예외를 사용함
 *
 * 결과 : 정상 처리와 에러 처리를 명확하게 분리 가능
 *       에러 코드를 반환해서 전파하지 않아도 됨
 *       에러 관련 정보를 예외 객체에 저장 가능
 *       에러 발생 부분과 에러 처리 부분이 분리되기 때문에 알기 어려워지는 경우도 있음
 *
 * 방법 : (1) 에러 종류에 맞는 적절한 예외 작성
 *          1) 예외 상태가 아니라면 예외를 사용하지 않음
 *          2) 복구 가능한 에러라면 검사 예외 선택
 *          3) 복구 불가능한 에러 또는 프로그래머 실수로 인한 에러라면 비검사 예외 선택
 *          4) 컴파일
 *       (2) 메서드를 호출하는 쪽 변경(검사 예외)
 *          1) 호출하는 쪽에서 에러를 처리한다면 try ~ catch 추가
 *          2) 호출하는 쪽에서 에러를 처리하지 않는다면 throws 절 추가
 *          3) 컴파일해서 테스트
 *       (3) 메서드를 호출하는 쪽 변경(비검사 예외)
 *          1) 호출하기 전에 조건 판정
 *          2) 컴파일해서 테스트
 *
 * 관련 항목 : 예외를 조건 판정으로 치환
 *           역 리팩토링
 *
 * 자바에는 검사 예외와 비검사 예외와 같은 두 가지 종류의 예외가 있다.
 *  (1) throw 문으로 던질 수 있는 인스턴스의 최상위 클래스는 java.lang.Throwable 클래스이다.
 *  (2) 검사 예외(checked exception)은 보통 java.lang,Exception 의 하위 클래스로 선언한다.
 *      메서드 안에서 검사 예외를 던지는 문장을 작성할 때는 다음 중 하나를 수행해야 한다.
 *          - 해당 구문을 try ~ catch 로 감싼다.
 *          - 해당 메서드에 throws 절을 붙인다.
 *  (3) 그렇지 않으면 컴파일러가 이를 인식(검사)해서 컴파일 에러를 일으킨다. 컴파일러가 이런 검사를 하므로 java.lang.Exception 과
 *      그 하위 클래스를 검사 예외라고 부른다.
 *  (4) 비검사 예외(unchecked exception)는 보통 java.lang.RuntimeException 의 하위 클래스로 선언한다.
 *      비검사 예외는 어디서 던지든 컴파일러가 검사하지 않는다.
 *
 * '검사 예외;를 도입하면 try ~ catch 문을 작성하거나 throws 절을 작성해야 한다.
 * 이런 게 귀찮은 프로그래머라면 '비검사 예외'를 도입하고 싶을 것이다. 하지만 비검사 예외는 신중하게 사용해야 한다.
 * 비검사 예외는 사전 확인으로 예외 발생을 회피 가능한 상황에 사용하는 게 좋다.
 * 그리고 비검사 예외를 만들 때는 예외 발생 여부를 미리 조사하기 위한 사전 확인용 메서드도 준비하는 것이 좋다.
 * 실제로 자바 클래스 라이브러리에도그런 사례가 있다.
 *  - 예를 들어 이번 예쩨 프로그램에서 java.util.StringTokenizer 클래스를 사용하는데, 이 클래스는 다음 토큰을 얻을 때 nextToken
 *    메서드를 사용한다. nextToken 메서드는 '다음 토큰이 존재하지 않을 때' java.util.NosuchElementException 이라는 비검사
 *    예외를 던진다. 다음 토큰의 존재 여부는 hasMoreTokens 메서드로 조사할 수 있다. 그래서 보통은 hasMoreTokens 메서드로
 *    다음 토큰이 있는지 화깅ㄴ한 후에 nextToken 메서드를 호출한다. hasMoreTokens 메서드는 java.util.NoSuchElementException
 *    을 던지는지 아닌지의 사전 확인용 메서드가 된다.
 * - 그 외에도 비검사 예외를 던지는 메서드의 사전 확인용 메서드로 다음과 같은 것이 있다
 *   java.util.Iterator 의 next 메서드의 사전 확인ㅇ용 hasNext 메서드
 *   java.nio.charset.CharsetEncoder 의 encode 메서드의 사전 확인용 canEncode 메서드
 * - 사전 확인용 메서드는 없지만 배열 인덱스 범위를 벗어날 때 발생하는 비검사 예외인 java.lang.ArrayIndexOutOfBoundsException 도
 *   사전에 확인 할 수 있다.
 *
 */
public class Refactoring {
}
