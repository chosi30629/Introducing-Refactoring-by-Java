package _06_extractclass;


/**
 * 이름 : 클래스 추출
 *
 * 상황 : 클래스를 작성함
 *
 * 문제 : 한 클래스가 너무 많은 책임을 지고 있음
 *
 * 해법 : 묶을 수 있는 필드와 메서드를 찾아 새로운 클래스로 추출
 *
 * 결과 : (1) 클래스가 작아짐
 *       (2) 클래스의 책임이 명확해짐
 *       (3) 클래스 개수가 늘어남
 *
 * 방법 : (1) 새로운 클래스 작성
 *          1) 클래스의 책임을 어떻게 추출할지 결정
 *          2) 추출한 책임을 담당할 새로운 클래스 작성
 *             기존 클래스의 책임이 이름과 일치하지 않게 되면 기존 클래스의 이름을 바꿈
 *          3) 기존 클래스에서 새로운 클래스로 링크 작성
 *             반대 방향 링크는 가능한 한 만들지 않음(링크는 단방향, 양방향은 관리하기 어려움)
 *       (2) 필드 이동
 *          1) 기존 클래스에서 새로운 클래스로 필요한 필드 이동
 *          2) 이동할 때마다 컴파일해서 테스트
 *       (3) 메서드 이동
 *          1) 기존 클래스에서 새로운 클래스로 필요한 메서드 이동
 *          2) 이동할 때마다 컴파일해서 테스트
 *       (4) 추출한 클래스 검토
 *          1) 클래스 인터페이스(API)를 줄일 수 있는가
 *          2) 새로운 클래스를 외부에 공개해야 하는가
 *          3) 공개한다면 외부에서 수정 가능하게 할 것인가
 *
 * 관련 항목 : (1) 클래스명 변경
 *              - 클래스를 추출한 결과로 클래스명이 책임과 일치하지 않으면 이름을 변경함
 *           (2) 필드 이동
 *              - 기존 클래스에서 새로운 클래스로 필드를 이동함
 *           (3) 메서드 이동
 *              - 기존 클래스에서 새로운 클래스로 메서드를 이동함
 *
 * 필드를 private 로 선언해서 외부에서 직접 접근하지 못하게 막고 반드시 게터 메서드를 써서 필드에 접근하게 하는 걸 캡슐화라고 부른다.
 *  - 필드 캡슐화도 리팩토링의 일종이다.
 *
 * 지나치게 클래스 추출을 하는 것도 문제이다.
 *  - 클래스 추출을 할 때마다 클래스 개수가 늘어남
 *  - 클래스 인라인화 : 작은 클래스 내부(필드나 메서드)를 해당 클래스를 실제로 사용하는 클래스로 모두 옮기고 작은 클래스 삭제
 *
 * 리팩토링은 언제나 균형이 중요하다.
 *  - '너무 길다' 또는 '너무 짧다'는 악취를 풍긴다.
 *
 * 소프트웨어 개발은 정원 관리와 비슷하다.
 *  - 나무와 화초의 균형, 잎과 꽃의 균형을 맞추는 것처럼 소프트웨어 전체를 정리할 필요가 있다.
 */
public class Refactoring {
}
