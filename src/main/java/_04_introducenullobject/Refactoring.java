package _04_introducenullobject;


/**
 * 이름 : 널 객체 도입
 *
 * 상황 : 객체를 다룸
 *
 * 문제 : null 확인이 너무 많음
 *
 * 해법 : null 을 나타내는 특별한 객체를 도입해 '아무것도 안 함'이라는 처리를 함
 *
 * 결과 : (1) null 확인이 줄어듦
 *       (2) 널 객체만큼 클래스가 늘어남
 *
 * 방법 : (1) 널 객체 클래스 작성
 *          1) 널 객체 클래스 작성
 *              - 기존 클래스(null 을 확인하는 클래스)의 하위 클래스로 작성
 *          2) isNull 메서드 작성
 *              - 기존 클래스는 false 반환
 *              - 널 객체 클래스는 true 반환
 *          3) 컴파일
 *       (2) null 치환하기
 *          1) null 을 널 객체로 치환
 *          2) null 확인을 isNull 메서드 호출로 치환
 *          3) 컴파일해서 테스트
 *       (3) 널 객체 클래스를 재정의해서 조건 판단 삭제하기
 *          1) isNull 메서드를 사용하느 ㄴ조건 판단에서 다음과 같은 코드를 찾기
 *
 *          if (obj.isNull()) {
 *              <null 동작>
 *          } else {
 *              obj,doSomething();
 *          }
 *
 *          2) 널 객체 클래스에서 doSomething 메서드를 오버라이드함. 이 메서드에는 <null 동작>을 작성함
 *          3) 조건 판단 삭제
 *              - obj.doSomething();
 *          4) 컴파일해서 테스트
 * 관련 항목 : (1) 어서션 도입
 *              - 잘못해서 null 을 사용하고 있지 않은지 확인하기 위한 어서션을 도입하면 좋음
 *           (2) 널 객체 패턴
 *           (3) 싱글톤 패턴
 *           (4) 팩토리 메서드 패턴
 *
 * null 확인은 나쁜가?
 *  - 리팩토링은 나쁜 코드의 체질을 개선하는 것이다.
 *  - null 확인이 너무 많아서 빠뜨리거나 실수할 것 같을 때 쓰는 것이다.
 *  - null 확인을 모두 널 객체로 바꾸지 않아도 된다.
 *
 * 패턴 중독에 빠지지 않기
 *  - 지금 여기서 해결해야 하는 문제는 무엇인가를 의식
 *  - null 확인이 너무 많다면 널 객체 도입을 한다.      O
 *  - 클래스명을 은폐하려면 팩토리 메서드 패턴을 사용한다.  O
 *  - 메모리 소비량이 많다면 싱글톤 패턴을 사용한다.      O
 *  - null 확인이 있으면 당장 널 객체 도입을 한다.      X
 *  - new 가 있다면 팩토리 메서드로 만든다.            X
 *  - 뭐든지 싱글톤으로 만들고 싶다.                  X
 *
 * isNull 메서드는 필요한가?
 *  - isNull 메서드의 필요 여부는 리팩토링 대상인 실제 코드에 의존한다.
 *  - 다형성으로 널 객체화를 할 수 없다면 isNull 메서드를 사용할 수 밖에 없다.
 *
 * 기존 클래스를 수정할 수 없다면?
 *  - Null 이라는 빈 인터페이스를 만들고 NullLabel 클래스는 이 Null 인터페이스를 구현하는 방법을 사용한다.
 *  - obj.isNull() 대신 obj instanceof Null 같은 표현식을 사용한다.
 *  - 'instanceof 는 악취를 풍긴다'라고 하지만, 상위 클래스를 변경할 수 없는 제약이 있으면 이 방법이 해결책이다.
 *  - Null 같은 인터페이스를 마커(Marker) 인터페이스라고 한다. java.io.Serializable 인터페이스 등이 마커 인터페이스의 예이다.
 *
 * 널 객체는 기존 클래스와 같은 인터페이스(API)를 가지지만 '아무것도 안 하는'구현이다.
 */
public class Refactoring {
}
