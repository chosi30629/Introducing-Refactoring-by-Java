package introduceassertion03;


/**
 * 1) 어서션 도입
 *  - 코드 안에서 '성립해야 할 조건'이라면 주석이 아닌 어서션을 도입하자.
 *  - 어서션은 사람과 컴퓨터 양쪽에 프로그래머의 의도를 전달하는 방법이다.
 *  - assert value > 0;
 *  - value > 0 을 어서션한다.
 *  - value > 0 임을 표명한다.
 *  - value > 0 이라면 아무 일도 일어나지 않는다.
 *  - value > 0 이 아니라면 자바 실행 환경은 java.lang.AssertionError 예외를 던진다.
 *  - AssertionError 가 발생하면 프로그래머의 기대와 다르다는 사실을 알 수 있으므로 어서션은 프로그램의 에러를 빨리 발견하는 방법
 *  - 소스 코드에서 '성립해야 할 조건' 찾기
 *  - 조건을 포함한 어서션 작성
 *  - 적혀 있던 주석은 무의미하므로 주석 삭제
 *  - 컴파일해서 테스트
 *
 * 2) 어서션을 일반 에러 처리 대신에 사용하면 안 됨
 *  - 어서션은 에러 처리를 대신 할 수 없음
 *
 * 3) 어서션 안에 부수 효과가 있는 코드를 작성하면 안 됨
 *
 * 4) 어서션 조건식 때문에 프로그램에 부수 효과가 생기면 안된다.
 *  - 어서션 메서드를 호출해도 객체의 내부 상태가 변하면 안된다.
 *  - 부수 효과가 없어야 하는 건 어서션은 활성화, 비활성화 할 수 있기 때문이다.
 *  - 어서션 화럿ㅇ화 여부가 객체 동작에 영향을 주면 곤란하다.
 *  - 어셔션에 있는 조건은 이른바 '비파괴 검사'여야 한다.
 *
 * 5) 자바 어서션은 클래스 라이브러리가 아님
 *  - 자바 어서션에서 사용하는 assert 는 자바 언어 키워드로 취급한다.
 *  - 자바 언어 사양에 포함되어 있다.
 */
public class Refactoring {
}
