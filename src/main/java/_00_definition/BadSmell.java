package _00_definition;


/**
 * 1) 프로그램에서 리팩토링이 필요한 부분을 '악취'가 난다고 표현한다.
 *  - 이해하기 어려운 부분
 *  - 수정하기 어려운 부분
 *  - 확장하기 어려운 부분
 *
 * 2) 코드의 악취
 *  - 중복 코드
 *  - 너무 긴 메서드
 *  - 필드나 메서드가 너무 많은 클래스
 *  - 매개변수 개수가 너무 많은 메서드
 *  - 사양 변경이 있을 때 수정 내용이 곳곳에 흩어져 있는 경우
 *  - 어떤 클래스를 수정하면 다른 클래스도 수정해야하는 경우
 *  - 언제나 다른 클래스 내용을 수정하는 클래스가 있는 경우
 *  - 합쳐서 다뤄야 할 데이터가 한 클래스에 모여 있지 않는 경우
 *  - 클래스를 만들지 않고 int 같은 기본 타입만 집착하는 경우
 *  - switch 문이나 if 문으로 동작을 나눈 경우
 *  - 하위 클래스를 만들면 클래스 계층의 다른 곳에도 하위 클래스를 만들어야 하는 경우
 *  - 별로 하는 게 없는 클래스
 *  - '언젠가 이런 확장을 하겠지' 라고 너무 일반화
 *  - 임시로만 쓰는 필드
 *  - 메서드 호출 연쇄가 너무 많은 경우
 *  - 맡기기만 하고 자신은 일하지 않는 클래스
 *  - 그럴 필요가 없는데도 양방향 링크를 걸거나 IS-A 관계까 없는데 상속을 사용
 *  - 클래스 인터페이스(API)가 적절하지 않은 경우
 *  - 기존 라이브러리 클래스를 사용하기 어려운 경우
 *  - 필드와 Getter 메서드와 Setter 메서드뿐인 클래스
 *  - 상속한 메서드인데 호출하면 문제가 발생
 *  - 코드의 모자란 점을 설명하기 위한 자세한 주석
 *
 * 3) 악취를 나타내는 말
 *  - 겹치잖아! (메서드 추출, 클래스 추출, 널 객체 도입, 에러 코드를 예외로 치환)
 *  - 너무 길어! (메서드 추출, 클래스 추출)
 *  - 너무 많아! (중개자 제거, 클래스 인라인화, 메서드 인라인화)
 *  - 이름이 안 맞잖아! (메서드 추출, 메서드명 변경, 설명용 변수 도임, 임시 변수 분리)
 *  - 너무 공개적이잖아! (필드 캡슐화, 생성자를 팩토리 메서드로 치환, 정보 은폐)
 *  - 객체 지향답지 않아! (분류 코드를 클래스로 치환, 분류 코드를 하위 클래스로 치환)
 */
public class BadSmell {
}
